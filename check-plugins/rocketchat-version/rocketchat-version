#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

"""See the check's README for more details.
"""

import argparse  # pylint: disable=C0413
import sys  # pylint: disable=C0413

import lib.base  # pylint: disable=C0413
import lib.cache  # pylint: disable=C0413
import lib.rocket  # pylint: disable=C0413
import lib.time  # pylint: disable=C0413
import lib.url  # pylint: disable=C0413
import lib.version  # pylint: disable=C0413
from lib.globals import (STATE_CRIT, STATE_OK,  # pylint: disable=C0413
                          STATE_UNKNOWN, STATE_WARN)

__author__ = 'Linuxfabrik GmbH, Zurich/Switzerland'
__version__ = '2024031501'

DESCRIPTION = """This plugin lets you track if server updates are available. Requires a user with
                 strong password and "view-statistics" permission (only)."""

DEFAULT_CACHE_EXPIRE = 24 # hours
DEFAULT_INSECURE = False
DEFAULT_NO_PROXY = False
DEFAULT_TIMEOUT = 3
DEFAULT_URL = 'http://localhost:3000/api/v1'
DEFAULT_USERNAME = 'rocket-stats'


def parse_args():
    """Parse command line arguments using argparse.
    """
    parser = argparse.ArgumentParser(description=DESCRIPTION)

    parser.add_argument(
        '-V', '--version',
        action='version',
        version='%(prog)s: v{} by {}'.format(__version__, __author__)
        )

    parser.add_argument(
        '--always-ok',
        help='Always returns OK.',
        dest='ALWAYS_OK',
        action='store_true',
        default=False,
        )

    parser.add_argument(
        '--cache-expire',
        help='The amount of time after which the update check cache expires, in hours. '
             'Default: %(default)s',
        dest='CACHE_EXPIRE',
        type=int,
        default=DEFAULT_CACHE_EXPIRE,
        )

    parser.add_argument(
        '--insecure',
        help='This option explicitly allows to perform "insecure" SSL connections. '
             'Default: %(default)s',
        dest='INSECURE',
        action='store_true',
        default=DEFAULT_INSECURE,
    )

    parser.add_argument(
        '--no-proxy',
        help='Do not use a proxy. '
             'Default: %(default)s',
        dest='NO_PROXY',
        action='store_true',
        default=DEFAULT_NO_PROXY,
    )

    parser.add_argument(
        '-p', '--password',
        help='Rocket.Chat API password.',
        dest='PASSWORD',
        required=True,
        )

    parser.add_argument(
        '--timeout',
        help='Network timeout in seconds. '
             'Default: %(default)s (seconds)',
        dest='TIMEOUT',
        type=int,
        default=DEFAULT_TIMEOUT,
    )

    parser.add_argument(
        '--url',
        help='Rocket.Chat API URL. '
             'Default: %(default)s',
        dest='URL',
        default=DEFAULT_URL,
        )

    parser.add_argument(
        '--username',
        help='Rocket.Chat API username. '
             'Default: %(default)s',
        dest='USERNAME',
        default=DEFAULT_USERNAME,
        required=True,
        )

    return parser.parse_args()


def get_latest_version(expire):
    # get version online, but first from cache
    latest_version = lib.cache.get('rocketchat-version')
    if latest_version:
        return (True, latest_version)

    # nothing found in cache, get the latest version from github
    success, latest_version = lib.url.get_latest_version_from_github('RocketChat', 'Rocket.Chat')
    if not success:
        return (success, latest_version)

    lib.cache.set('rocketchat-version', latest_version, lib.time.now() + expire)
    return (True, latest_version)


def main():
    """The main function. Hier spielt die Musik.
    """

    # parse the command line, exit with UNKNOWN if it fails
    try:
        args = parse_args()
    except SystemExit:
        sys.exit(STATE_UNKNOWN)

    # fetch data
    credentials = lib.base.coe(lib.rocket.get_token(
        args.URL,
        args.USERNAME,
        args.PASSWORD,
        insecure=args.INSECURE,
        no_proxy=args.NO_PROXY,
        timeout=args.TIMEOUT,
    ))
    authToken, userId = credentials.split(':')
    result = lib.base.coe(lib.rocket.get_stats(
        args.URL,
        authToken,
        userId,
        insecure=args.INSECURE,
        no_proxy=args.NO_PROXY,
        timeout=args.TIMEOUT,
    ))

    if result.get('statistics', None):
        # version < 3.0.0
        installed_version = result['statistics']['version']
    else:
        # version >= 3.0.0
        installed_version = result['version']
    latest_version = lib.base.coe(get_latest_version(args.CACHE_EXPIRE*60*60))

    # over and out
    if lib.version.version(installed_version) >= lib.version.version(latest_version):
        lib.base.oao('Rocket.Chat v{} is up to date'.format(installed_version), STATE_OK)
    lib.base.oao('Rocket.Chat v{} installed, Rocket.Chat v{} available'.format(
        installed_version,
        latest_version,
    ), STATE_WARN, always_ok=args.ALWAYS_OK)


if __name__ == '__main__':
    try:
        main()
    except Exception:   # pylint: disable=W0703
        lib.base.cu()
