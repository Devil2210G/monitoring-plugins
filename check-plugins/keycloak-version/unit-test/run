#!/usr/bin/env python3
# -*- coding: utf-8; py-indent-offset: 4 -*-
#
# Author:  Linuxfabrik GmbH, Zurich, Switzerland
# Contact: info (at) linuxfabrik (dot) ch
#          https://www.linuxfabrik.ch/
# License: The Unlicense, see LICENSE file.

# https://github.com/Linuxfabrik/monitoring-plugins/blob/main/CONTRIBUTING.rst

import os
import subprocess
import sys
import time
import unittest

CHECK_PLUGIN = 'keycloak-version'
REMOTE_DIR = '/tmp'  # work dir in container (where to find the CHECK_PLUGIN in the container)
LOCAL_DIR = '..'  # local work dir (where to find the CHECK_PLUGIN locally)
TIMEOUT = 30
TESTS = {
    # "lfmp-containername": {
    #     'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
    #     'tests': {
    #         f"REMOTE --param1=value1": r"Keycloak v18.* \(EOL 2022-07-27 -30d \[WARNING\], major .* available\)",
    #         f"LOCAL --param1=value1": r"Keycloak v18.* \(EOL 2022-07-27 -30d \[WARNING\], major .* available\)",
    #     },
    # },
    "lfmp-keycloak-v18.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v18.* \(EOL 2022-07-27 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"Keycloak v18.* \(EOL 2022-07-27 -30d \[WARNING\], major .* available\)",  # check automatically uses the Keycloak API
        },
    },
    "lfmp-keycloak-v19.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v19.* \(EOL 2022-11-01 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"Keycloak v19.* \(EOL 2022-11-01 -30d \[WARNING\], major .* available\)",
        },
    },
    "lfmp-keycloak-v20.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v20.* \(EOL 2023-02-23 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"Keycloak v20.* \(EOL 2023-02-23 -30d \[WARNING\], major .* available\)",
        },
    },
    "lfmp-keycloak-v21.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v21.* \(EOL 2023-04-19 -30d \[WARNING\], major .* available, minor 21.* available\)",
            f"LOCAL": r"Keycloak v21.* \(EOL 2023-04-19 -30d \[WARNING\], major .* available, minor 21.* available\)",
        },
    },
    "lfmp-keycloak-v22.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v22.* \(EOL 2023-11-23 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"Keycloak v22.* \(EOL 2023-11-23 -30d \[WARNING\], major .* available\)",
        },
    },
    "lfmp-keycloak-v23.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=linuxfabrik',
        'tests': {
            f"REMOTE": r"Keycloak v23.* \(EOL 2024-03-04 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"HTTP error \"401 Unauthorized\" while fetching http://localhost:8080/realms/master/protocol/openid-connect/token",
        },
    },
    "lfmp-keycloak-v24.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v24.* \(EOL 2024-06-10 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"Keycloak v24.* \(EOL 2024-06-10 -30d \[WARNING\], major .* available\)",
        },
    },
    "lfmp-keycloak-v25.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v25.* \(EOL 2024-10-04 -30d \[WARNING\], major .* available\)",
            f"LOCAL": r"Keycloak v25.* \(EOL 2024-10-04 -30d \[WARNING\], major .* available\)",
        },
    },
    "lfmp-keycloak-v26.0": {
        'podman_run_params': '--publish=8080:8080 --env=KEYCLOAK_ADMIN=admin --env=KEYCLOAK_ADMIN_PASSWORD=admin',
        'tests': {
            f"REMOTE": r"Keycloak v26.* \(EOL ",
            f"LOCAL": r"Keycloak v26.* \(EOL ",
        },
    },
}

class TestCheck(unittest.TestCase):

    def test(self):
        """
        Test all Dockerfiles in the 'unit-test/containerfiles' directory.
        Builds, runs, and tests each container and validates the output, using podman.
        """
        containerfiles_dir = os.path.abspath("containerfiles")

        # Ensure the containerfiles directory exists
        if not os.path.isdir(containerfiles_dir):
            self.fail(f"Containerfiles directory '{containerfiles_dir}' not found.")

        # Find all Dockerfiles
        containerfiles = [
            os.path.join(containerfiles_dir, f)
            for f in os.listdir(containerfiles_dir)
        ]
        if not containerfiles:
            self.fail(f"No containerfiles found in '{containerfiles_dir}'.")

        for containerfile in containerfiles:
            print(f"\n=== Testing {os.path.basename(containerfile)} ===")
            version = os.path.basename(containerfile).split("-v")[1]  # Extract version from filename
            image_name = f"lfmp-{os.path.basename(containerfile).replace('-v', ':')}"
            container_name = f"lfmp-{os.path.basename(containerfile)}"

            try:
                # Build the container image
                podman_cmd = ["podman", "build", "--file", containerfile, "--tag", image_name]
                print(f"Build the container image: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )

                podman_cmd = [
                    "podman", "run",
                    "--name", container_name,
                    "--replace",
                    "--detach",  # run in detached mode
                ] + TESTS[container_name]['podman_run_params'].split() + image_name.split()
                print(f"Run the container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )

                print(f"Give the container a few seconds to start up")
                time.sleep(3)

                podman_cmd = ["podman", "cp", "../lib", f"{container_name}:{REMOTE_DIR}/"]
                print(f"Copy local files into container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )
                podman_cmd = ["podman", "cp", f"../{CHECK_PLUGIN}", f"{container_name}:{REMOTE_DIR}/{CHECK_PLUGIN}"]
                print(f"Copy local files into container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=True,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )

                # Check if /tmp/venv exists in the container
                podman_cmd = [
                    "podman", "exec", container_name,
                    "sh", "-c", "test -d /tmp/venv && echo 'venv exists'"
                ]
                print(f"Check if /tmp/venv exists in the container: {' '.join(podman_cmd)}")
                venv_exists = subprocess.run(
                    podman_cmd,
                    check=False,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                ).stdout.strip() == "venv exists"
                print(f"Check if /tmp/venv exists in the container: {venv_exists}")

                print(f"Give server daemons a few seconds to start up")
                time.sleep(TIMEOUT)

                print(f"Run the test cases...")
                for cmdline, expected_output in TESTS[container_name]['tests'].items():
                    if cmdline.startswith('REMOTE'):
                        cmdline = cmdline.replace('REMOTE', CHECK_PLUGIN).strip()
                        if venv_exists:
                            podman_cmd = [
                                "podman", "exec", "--workdir", REMOTE_DIR, container_name,
                                "sh", "-c", f". /tmp/venv/bin/activate && python3 {cmdline}"
                            ]
                            print(f"Run test in container in venv: {' '.join(podman_cmd)}")
                        else:
                            podman_cmd = [
                                "podman", "exec", "--workdir", REMOTE_DIR, container_name,
                                "python3",
                            ] + cmdline.split()
                            print(f"Run test in container: {' '.join(podman_cmd)}")
                        result = subprocess.run(
                            podman_cmd,
                            check=False,  # We'll handle checking the output ourselves
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            text=True,
                        )
                    else:
                        cmdline = cmdline.replace('LOCAL', os.path.join(LOCAL_DIR, CHECK_PLUGIN)).strip()
                        local_cmd = ['python3'] + cmdline.split()
                        print(f"Run test locally: {' '.join(local_cmd)}")
                        result = subprocess.run(
                            local_cmd,
                            check=False,  # We'll handle checking the output ourselves
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            text=True,
                        )

                    # Check the output
                    output = result.stdout + "\n" + result.stderr
                    print(f"Script output:\n{output.strip()}")
                    self.assertRegex(result.stdout + result.stderr, expected_output)

            finally:
                # Stop and remove the container no matter what
                podman_cmd = ["podman", "rm", "--force", container_name]
                print(f"Stop and remove container: {' '.join(podman_cmd)}")
                subprocess.run(
                    podman_cmd,
                    check=False,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                )


if __name__ == '__main__':
    unittest.main()
